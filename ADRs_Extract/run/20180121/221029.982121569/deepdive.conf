
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        has_effect.label: Boolean
      }
    

      deepdive.extraction.extractors.ext_ards_label {
        cmd: """

	# TODO use temporary table
	deepdive create table "ards_label"
	deepdive sql 'INSERT INTO ards_label SELECT R0.p1_id AS "ards_candidate.R0.p1_id", R0.p2_id AS "ards_candidate.R0.p2_id", 0 AS column_2, NULL AS column_3
FROM ards_candidate R0
        
UNION ALL
SELECT R0.p1_id AS "ards_candidate.R0.p1_id", R0.p2_id AS "ards_candidate.R0.p2_id", 3 AS column_2, '\''from_dbdata'\'' AS column_3
FROM ards_candidate R0, ards_dbdata R1
        WHERE (lower(R1.med_name) = lower(R0.p1_name) AND lower(R1.ard_name) = lower(R0.p2_name))'
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "ards_label"
        style: "cmd_extractor"
          dependencies: [ "ext_ards_candidate_by_map_ards_candidate" ]
          input_relations: [
            ards_candidate
            ards_dbdata
          ]
      }
    

      deepdive.extraction.extractors.ext_ards_label_resolved {
        cmd: """

	deepdive create view ards_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2
FROM ards_label R0
        
        GROUP BY R0.p1_id, R0.p2_id'
	
        """
          output_relation: "ards_label_resolved"
        style: "cmd_extractor"
          dependencies: [ "ext_ards_label" ]
          input_relations: [
            ards_label
          ]
      }
    

      deepdive.extraction.extractors.ext_has_effect {
        cmd: """

	# TODO use temporary table
	deepdive create table "has_effect"
	deepdive sql 'INSERT INTO has_effect SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, 
CASE WHEN R0.column_2 > 0 THEN true
     WHEN R0.column_2 < 0 THEN false
     ELSE NULL
END AS label
          FROM ards_label_resolved R0
        
          '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "has_effect"
        style: "cmd_extractor"
          dependencies: [ "ext_ards_label_resolved" ]
          input_relations: [
            ards_label_resolved
          ]
      }
    

        deepdive.extraction.extractors.ext_sentence_by_nlp_markup {
          input: """ SELECT R0.id AS "articles.R0.id", R0.content AS "articles.R0.content"
FROM articles R0
        
          """
          output_relation: "sentence"
          udf: ${APP_HOME}"/udf/fenci.py"
          style: "tsv_extractor" 
          
          input_relations: [
            articles
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_sentences_by_modify_sentences {
          input: """ SELECT R0.doc_id AS "sentence.R0.doc_id", R0.sentence_index AS "sentence.R0.sentence_index", R0.sentence_text AS "sentence.R0.sentence_text", R0.tokens AS "sentence.R0.tokens", R0.lemmas AS "sentence.R0.lemmas", R0.pos_tags AS "sentence.R0.pos_tags", R0.ner_tags AS "sentence.R0.ner_tags", R0.doc_offsets AS "sentence.R0.doc_offsets", R0.dep_types AS "sentence.R0.dep_types", R0.dep_tokens AS "sentence.R0.dep_tokens"
FROM sentence R0
        
          """
          output_relation: "sentences"
          udf: ${APP_HOME}"/udf/reco_med_ard_guo.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentence_by_nlp_markup" ]
          input_relations: [
            sentence
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_ards_mention_by_map_ards_mention {
          input: """ SELECT R0.doc_id AS "sentences.R0.doc_id", R0.sentence_index AS "sentences.R0.sentence_index", R0.tokens AS "sentences.R0.tokens", R0.ner_tags AS "sentences.R0.ner_tags"
FROM sentences R0
        
          """
          output_relation: "ards_mention"
          udf: ${APP_HOME}"/udf/map_ards_mention.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_by_modify_sentences" ]
          input_relations: [
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_medicine_mention_by_map_medicine_mention {
          input: """ SELECT R0.doc_id AS "sentences.R0.doc_id", R0.sentence_index AS "sentences.R0.sentence_index", R0.tokens AS "sentences.R0.tokens", R0.ner_tags AS "sentences.R0.ner_tags"
FROM sentences R0
        
          """
          output_relation: "medicine_mention"
          udf: ${APP_HOME}"/udf/map_medicine_mention.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_by_modify_sentences" ]
          input_relations: [
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_ards_candidate_by_map_ards_candidate {
          input: """ SELECT R0.mention_id AS "medicine_mention.R0.mention_id", R0.mention_text AS "medicine_mention.R0.mention_text", R1.mention_id AS "ards_mention.R1.mention_id", R1.mention_text AS "ards_mention.R1.mention_text"
FROM medicine_mention R0, ards_mention R1
        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index 
          """
          output_relation: "ards_candidate"
          udf: ${APP_HOME}"/udf/map_ards_candidate.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_medicine_mention_by_map_medicine_mention" ,  "ext_ards_mention_by_map_ards_mention" ]
          input_relations: [
            medicine_mention
            ards_mention
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_ards_feature_by_extract_ards_features {
          input: """ SELECT R0.mention_id AS "medicine_mention.R0.mention_id", R1.mention_id AS "ards_mention.R1.mention_id", R0.begin_index AS "medicine_mention.R0.begin_index", R0.end_index AS "medicine_mention.R0.end_index", R1.begin_index AS "ards_mention.R1.begin_index", R1.end_index AS "ards_mention.R1.end_index", R0.doc_id AS "medicine_mention.R0.doc_id", R0.sentence_index AS "medicine_mention.R0.sentence_index", R2.tokens AS "sentences.R2.tokens", R2.lemmas AS "sentences.R2.lemmas", R2.pos_tags AS "sentences.R2.pos_tags", R2.ner_tags AS "sentences.R2.ner_tags", R2.dep_types AS "sentences.R2.dep_types", R2.dep_tokens AS "sentences.R2.dep_tokens"
FROM medicine_mention R0, ards_mention R1, sentences R2
        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index 
          """
          output_relation: "ards_feature"
          udf: ${APP_HOME}"/udf/extract_ards_features.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_medicine_mention_by_map_medicine_mention" ,  "ext_ards_mention_by_map_ards_mention" ,  "ext_sentences_by_modify_sentences" ]
          input_relations: [
            medicine_mention
            ards_mention
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.inference.factors.inf_istrue_has_effect {
          input_query: """
          SELECT R0.id AS "has_effect.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM has_effect R0, ards_candidate R1, ards_feature R2
        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id """
          function: "Imply(has_effect.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_ards_candidate_by_map_ards_candidate" ,  "ext_ards_feature_by_extract_ards_features" ]
          input_relations: [
            has_effect
            ards_candidate
            ards_feature
          ]
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_sentences_by_modify_sentences
  ext_sentence_by_nlp_markup
  ext_has_effect
  ext_medicine_mention_by_map_medicine_mention
  ext_ards_candidate_by_map_ards_candidate
  ext_ards_mention_by_map_ards_mention
  ext_ards_label_resolved
  ext_ards_label
  ext_ards_feature_by_extract_ards_features
]
deepdive.pipeline.pipelines.inference: [
  inf_istrue_has_effect
]
deepdive.pipeline.pipelines.endtoend: [
  ext_sentences_by_modify_sentences
  ext_sentence_by_nlp_markup
  ext_has_effect
  ext_medicine_mention_by_map_medicine_mention
  ext_ards_candidate_by_map_ards_candidate
  ext_ards_mention_by_map_ards_mention
  ext_ards_label_resolved
  ext_ards_label
  ext_ards_feature_by_extract_ards_features
  inf_istrue_has_effect
]
deepdive.schema {"relations" : {"ards_mention" : {"columns" : {"begin_index" : {"type" : "int", "index" : 4}, "sentence_index" : {"type" : "int", "index" : 3}, "doc_id" : {"type" : "text", "index" : 2}, "mention_text" : {"type" : "text", "index" : 1}, "end_index" : {"type" : "int", "index" : 5}, "mention_id" : {"type" : "text", "index" : 0}}}, "sentences" : {"columns" : {"sentence_index" : {"type" : "int", "index" : 1}, "sentence_text" : {"type" : "text", "index" : 2}, "doc_id" : {"type" : "text", "index" : 0}, "ner_tags" : {"type" : "text[]", "index" : 6}, "lemmas" : {"type" : "text[]", "index" : 4}, "dep_types" : {"type" : "text[]", "index" : 8}, "doc_offects" : {"type" : "int[]", "index" : 7}, "tokens" : {"type" : "text[]", "index" : 3}, "pos_tags" : {"type" : "text[]", "index" : 5}, "dep_tokens" : {"type" : "int[]", "index" : 9}}}, "ards_candidate" : {"columns" : {"p1_id" : {"type" : "text", "index" : 0}, "p1_name" : {"type" : "text", "index" : 1}, "p2_id" : {"type" : "text", "index" : 2}, "p2_name" : {"type" : "text", "index" : 3}}}, "ards_label" : {"columns" : {"p1_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_effect", "column" : "p1_id", "alias" : "has_effect"}}]}, "p2_id" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_effect", "column" : "p2_id", "alias" : "has_effect"}}]}, "label" : {"type" : "int", "index" : 2, "annotations" : [{"name" : "navigable"}]}, "rule_id" : {"type" : "text", "index" : 3, "annotations" : [{"name" : "navigable"}]}}, "annotations" : [{"name" : "extraction"}]}, "articles" : {"columns" : {"id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "distributed_by"}]}, "content" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}}}, "ards_dbdata" : {"columns" : {"med_name" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}, "ard_name" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "source"}]}, "medicine_mention" : {"columns" : {"begin_index" : {"type" : "int", "index" : 4}, "sentence_index" : {"type" : "int", "index" : 3}, "doc_id" : {"type" : "text", "index" : 2}, "mention_text" : {"type" : "text", "index" : 1}, "end_index" : {"type" : "int", "index" : 5}, "mention_id" : {"type" : "text", "index" : 0}}}, "ards_feature" : {"columns" : {"p1_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_effect", "column" : "p1_id", "alias" : "has_effect"}}]}, "p2_id" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_effect", "column" : "p1_id", "alias" : "has_effect"}}]}, "feature" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "extraction"}]}, "has_effect" : {"columns" : {"p1_id" : {"type" : "text", "index" : 0}, "p2_id" : {"type" : "text", "index" : 1}}, "annotations" : [{"name" : "extraction"}], "variable_type" : "boolean", "variable_cardinality" : 2}, "ards_label_resolved" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}, "column_2" : {"type" : "UNKNOWN", "index" : 2}}}, "sentence" : {"columns" : {"doc_offsets" : {"type" : "int[]", "index" : 7}, "sentence_index" : {"type" : "int", "index" : 1, "annotations" : [{"name" : "key"}]}, "sentence_text" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "searchable"}]}, "doc_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "distributed_by"}]}, "ner_tags" : {"type" : "text[]", "index" : 6}, "lemmas" : {"type" : "text[]", "index" : 4}, "dep_types" : {"type" : "text[]", "index" : 8}, "tokens" : {"type" : "text[]", "index" : 3}, "pos_tags" : {"type" : "text[]", "index" : 5}, "dep_tokens" : {"type" : "int[]", "index" : 9}}, "annotations" : [{"name" : "source"}]}}}
