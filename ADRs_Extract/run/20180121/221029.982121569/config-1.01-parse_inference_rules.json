{
  "deepdive": {
    "db": {
      "default": {
        "dbname": "ADR2",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "5432",
        "url": "jdbc:postgresql://localhost:5432/ADR2",
        "user": "xuyang"
      }
    },
    "extraction": {
      "extractors": {
        "ext_ards_candidate_by_map_ards_candidate": {
          "dependencies": [
            "ext_medicine_mention_by_map_medicine_mention",
            "ext_ards_mention_by_map_ards_mention"
          ],
          "input": " SELECT R0.mention_id AS \"medicine_mention.R0.mention_id\", R0.mention_text AS \"medicine_mention.R0.mention_text\", R1.mention_id AS \"ards_mention.R1.mention_id\", R1.mention_text AS \"ards_mention.R1.mention_text\"\nFROM medicine_mention R0, ards_mention R1\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "medicine_mention",
            "ards_mention"
          ],
          "output_relation": "ards_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_ards_candidate.py"
        },
        "ext_ards_feature_by_extract_ards_features": {
          "dependencies": [
            "ext_medicine_mention_by_map_medicine_mention",
            "ext_ards_mention_by_map_ards_mention",
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.mention_id AS \"medicine_mention.R0.mention_id\", R1.mention_id AS \"ards_mention.R1.mention_id\", R0.begin_index AS \"medicine_mention.R0.begin_index\", R0.end_index AS \"medicine_mention.R0.end_index\", R1.begin_index AS \"ards_mention.R1.begin_index\", R1.end_index AS \"ards_mention.R1.end_index\", R0.doc_id AS \"medicine_mention.R0.doc_id\", R0.sentence_index AS \"medicine_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM medicine_mention R0, ards_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "medicine_mention",
            "ards_mention",
            "sentences"
          ],
          "output_relation": "ards_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_ards_features.py"
        },
        "ext_ards_label": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"ards_label\"\n\tdeepdive sql 'INSERT INTO ards_label SELECT R0.p1_id AS \"ards_candidate.R0.p1_id\", R0.p2_id AS \"ards_candidate.R0.p2_id\", 0 AS column_2, NULL AS column_3\nFROM ards_candidate R0\n        \nUNION ALL\nSELECT R0.p1_id AS \"ards_candidate.R0.p1_id\", R0.p2_id AS \"ards_candidate.R0.p2_id\", 3 AS column_2, '\\''from_dbdata'\\'' AS column_3\nFROM ards_candidate R0, ards_dbdata R1\n        WHERE (lower(R1.med_name) = lower(R0.p1_name) AND lower(R1.ard_name) = lower(R0.p2_name))'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_ards_candidate_by_map_ards_candidate"
          ],
          "input_relations": [
            "ards_candidate",
            "ards_dbdata"
          ],
          "output_relation": "ards_label",
          "style": "cmd_extractor"
        },
        "ext_ards_label_resolved": {
          "cmd": "\n\n\tdeepdive create view ards_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2\nFROM ards_label R0\n        \n        GROUP BY R0.p1_id, R0.p2_id'\n\t\n        ",
          "dependencies": [
            "ext_ards_label"
          ],
          "input_relations": [
            "ards_label"
          ],
          "output_relation": "ards_label_resolved",
          "style": "cmd_extractor"
        },
        "ext_ards_mention_by_map_ards_mention": {
          "dependencies": [
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "ards_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_ards_mention.py"
        },
        "ext_has_effect": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"has_effect\"\n\tdeepdive sql 'INSERT INTO has_effect SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, \nCASE WHEN R0.column_2 > 0 THEN true\n     WHEN R0.column_2 < 0 THEN false\n     ELSE NULL\nEND AS label\n          FROM ards_label_resolved R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_ards_label_resolved"
          ],
          "input_relations": [
            "ards_label_resolved"
          ],
          "output_relation": "has_effect",
          "style": "cmd_extractor"
        },
        "ext_medicine_mention_by_map_medicine_mention": {
          "dependencies": [
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "medicine_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_medicine_mention.py"
        },
        "ext_sentence_by_nlp_markup": {
          "input": " SELECT R0.id AS \"articles.R0.id\", R0.content AS \"articles.R0.content\"\nFROM articles R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "articles"
          ],
          "output_relation": "sentence",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/fenci.py"
        },
        "ext_sentences_by_modify_sentences": {
          "dependencies": [
            "ext_sentence_by_nlp_markup"
          ],
          "input": " SELECT R0.doc_id AS \"sentence.R0.doc_id\", R0.sentence_index AS \"sentence.R0.sentence_index\", R0.sentence_text AS \"sentence.R0.sentence_text\", R0.tokens AS \"sentence.R0.tokens\", R0.lemmas AS \"sentence.R0.lemmas\", R0.pos_tags AS \"sentence.R0.pos_tags\", R0.ner_tags AS \"sentence.R0.ner_tags\", R0.doc_offsets AS \"sentence.R0.doc_offsets\", R0.dep_types AS \"sentence.R0.dep_types\", R0.dep_tokens AS \"sentence.R0.dep_tokens\"\nFROM sentence R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentence"
          ],
          "output_relation": "sentences",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/reco_med_ard_guo.py"
        }
      }
    },
    "inference": {
      "factors": {
        "inf_istrue_has_effect": {
          "dependencies": [
            "ext_ards_candidate_by_map_ards_candidate",
            "ext_ards_feature_by_extract_ards_features"
          ],
          "function": "Imply(has_effect.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_effect.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_effect R0, ards_candidate R1, ards_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_effect",
            "ards_candidate",
            "ards_feature"
          ],
          "weight": "?(dd_weight_column_0)"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "endtoend": [
          "ext_sentences_by_modify_sentences",
          "ext_sentence_by_nlp_markup",
          "ext_has_effect",
          "ext_medicine_mention_by_map_medicine_mention",
          "ext_ards_candidate_by_map_ards_candidate",
          "ext_ards_mention_by_map_ards_mention",
          "ext_ards_label_resolved",
          "ext_ards_label",
          "ext_ards_feature_by_extract_ards_features",
          "inf_istrue_has_effect"
        ],
        "extraction": [
          "ext_sentences_by_modify_sentences",
          "ext_sentence_by_nlp_markup",
          "ext_has_effect",
          "ext_medicine_mention_by_map_medicine_mention",
          "ext_ards_candidate_by_map_ards_candidate",
          "ext_ards_mention_by_map_ards_mention",
          "ext_ards_label_resolved",
          "ext_ards_label",
          "ext_ards_feature_by_extract_ards_features"
        ],
        "inference": [
          "inf_istrue_has_effect"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "ards_candidate": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p1_name": {
              "index": 1,
              "type": "text"
            },
            "p2_id": {
              "index": 2,
              "type": "text"
            },
            "p2_name": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "ards_dbdata": {
          "annotations": [
            {
              "name": "source"
            }
          ],
          "columns": {
            "ard_name": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 1,
              "type": "text"
            },
            "med_name": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 0,
              "type": "text"
            }
          }
        },
        "ards_feature": {
          "annotations": [
            {
              "name": "extraction"
            }
          ],
          "columns": {
            "feature": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 2,
              "type": "text"
            },
            "p1_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p1_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p1_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 1,
              "type": "text"
            }
          }
        },
        "ards_label": {
          "annotations": [
            {
              "name": "extraction"
            }
          ],
          "columns": {
            "label": {
              "annotations": [
                {
                  "name": "navigable"
                }
              ],
              "index": 2,
              "type": "int"
            },
            "p1_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p1_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p2_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 1,
              "type": "text"
            },
            "rule_id": {
              "annotations": [
                {
                  "name": "navigable"
                }
              ],
              "index": 3,
              "type": "text"
            }
          }
        },
        "ards_label_resolved": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        },
        "ards_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "articles": {
          "columns": {
            "content": {
              "annotations": [
                {
                  "name": "searchable"
                }
              ],
              "index": 1,
              "type": "text"
            },
            "id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "name": "distributed_by"
                }
              ],
              "index": 0,
              "type": "text"
            }
          }
        },
        "has_effect": {
          "annotations": [
            {
              "name": "extraction"
            }
          ],
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "medicine_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "sentence": {
          "annotations": [
            {
              "name": "source"
            }
          ],
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "name": "distributed_by"
                }
              ],
              "index": 0,
              "type": "text"
            },
            "doc_offsets": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "annotations": [
                {
                  "name": "searchable"
                }
              ],
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "index": 0,
              "type": "text"
            },
            "doc_offects": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        }
      },
      "variables": {
        "has_effect": {
          "label": "Boolean"
        }
      }
    }
  },
  "deepdive_": {
    "db": {
      "default": {
        "dbname": "ADR2",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "5432",
        "url": "jdbc:postgresql://localhost:5432/ADR2",
        "user": "xuyang"
      }
    },
    "extraction": {
      "extractors": {
        "process/ext_ards_candidate_by_map_ards_candidate": {
          "dependencies": [
            "ext_medicine_mention_by_map_medicine_mention",
            "ext_ards_mention_by_map_ards_mention"
          ],
          "input": " SELECT R0.mention_id AS \"medicine_mention.R0.mention_id\", R0.mention_text AS \"medicine_mention.R0.mention_text\", R1.mention_id AS \"ards_mention.R1.mention_id\", R1.mention_text AS \"ards_mention.R1.mention_text\"\nFROM medicine_mention R0, ards_mention R1\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "medicine_mention",
            "ards_mention"
          ],
          "output_relation": "ards_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_ards_candidate.py",
          "dependencies_": [
            "process/ext_medicine_mention_by_map_medicine_mention",
            "process/ext_ards_mention_by_map_ards_mention"
          ],
          "input_": [
            "data/medicine_mention",
            "data/ards_mention"
          ],
          "output_": "data/ards_candidate"
        },
        "process/ext_ards_feature_by_extract_ards_features": {
          "dependencies": [
            "ext_medicine_mention_by_map_medicine_mention",
            "ext_ards_mention_by_map_ards_mention",
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.mention_id AS \"medicine_mention.R0.mention_id\", R1.mention_id AS \"ards_mention.R1.mention_id\", R0.begin_index AS \"medicine_mention.R0.begin_index\", R0.end_index AS \"medicine_mention.R0.end_index\", R1.begin_index AS \"ards_mention.R1.begin_index\", R1.end_index AS \"ards_mention.R1.end_index\", R0.doc_id AS \"medicine_mention.R0.doc_id\", R0.sentence_index AS \"medicine_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM medicine_mention R0, ards_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "medicine_mention",
            "ards_mention",
            "sentences"
          ],
          "output_relation": "ards_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_ards_features.py",
          "dependencies_": [
            "process/ext_medicine_mention_by_map_medicine_mention",
            "process/ext_ards_mention_by_map_ards_mention",
            "process/ext_sentences_by_modify_sentences"
          ],
          "input_": [
            "data/medicine_mention",
            "data/ards_mention",
            "data/sentences"
          ],
          "output_": "data/ards_feature"
        },
        "process/ext_ards_label": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"ards_label\"\n\tdeepdive sql 'INSERT INTO ards_label SELECT R0.p1_id AS \"ards_candidate.R0.p1_id\", R0.p2_id AS \"ards_candidate.R0.p2_id\", 0 AS column_2, NULL AS column_3\nFROM ards_candidate R0\n        \nUNION ALL\nSELECT R0.p1_id AS \"ards_candidate.R0.p1_id\", R0.p2_id AS \"ards_candidate.R0.p2_id\", 3 AS column_2, '\\''from_dbdata'\\'' AS column_3\nFROM ards_candidate R0, ards_dbdata R1\n        WHERE (lower(R1.med_name) = lower(R0.p1_name) AND lower(R1.ard_name) = lower(R0.p2_name))'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_ards_candidate_by_map_ards_candidate"
          ],
          "input_relations": [
            "ards_candidate",
            "ards_dbdata"
          ],
          "output_relation": "ards_label",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_ards_candidate_by_map_ards_candidate"
          ],
          "input_": [
            "data/ards_candidate",
            "data/ards_dbdata"
          ],
          "output_": "data/ards_label"
        },
        "process/ext_ards_label_resolved": {
          "cmd": "\n\n\tdeepdive create view ards_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2\nFROM ards_label R0\n        \n        GROUP BY R0.p1_id, R0.p2_id'\n\t\n        ",
          "dependencies": [
            "ext_ards_label"
          ],
          "input_relations": [
            "ards_label"
          ],
          "output_relation": "ards_label_resolved",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_ards_label"
          ],
          "input_": [
            "data/ards_label"
          ],
          "output_": "data/ards_label_resolved"
        },
        "process/ext_ards_mention_by_map_ards_mention": {
          "dependencies": [
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "ards_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_ards_mention.py",
          "dependencies_": [
            "process/ext_sentences_by_modify_sentences"
          ],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/ards_mention"
        },
        "process/ext_has_effect": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"has_effect\"\n\tdeepdive sql 'INSERT INTO has_effect SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, \nCASE WHEN R0.column_2 > 0 THEN true\n     WHEN R0.column_2 < 0 THEN false\n     ELSE NULL\nEND AS label\n          FROM ards_label_resolved R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_ards_label_resolved"
          ],
          "input_relations": [
            "ards_label_resolved"
          ],
          "output_relation": "has_effect",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_ards_label_resolved"
          ],
          "input_": [
            "data/ards_label_resolved"
          ],
          "output_": "data/has_effect"
        },
        "process/ext_medicine_mention_by_map_medicine_mention": {
          "dependencies": [
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "medicine_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_medicine_mention.py",
          "dependencies_": [
            "process/ext_sentences_by_modify_sentences"
          ],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/medicine_mention"
        },
        "process/ext_sentence_by_nlp_markup": {
          "input": " SELECT R0.id AS \"articles.R0.id\", R0.content AS \"articles.R0.content\"\nFROM articles R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "articles"
          ],
          "output_relation": "sentence",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/fenci.py",
          "dependencies_": [],
          "input_": [
            "data/articles"
          ],
          "output_": "data/sentence"
        },
        "process/ext_sentences_by_modify_sentences": {
          "dependencies": [
            "ext_sentence_by_nlp_markup"
          ],
          "input": " SELECT R0.doc_id AS \"sentence.R0.doc_id\", R0.sentence_index AS \"sentence.R0.sentence_index\", R0.sentence_text AS \"sentence.R0.sentence_text\", R0.tokens AS \"sentence.R0.tokens\", R0.lemmas AS \"sentence.R0.lemmas\", R0.pos_tags AS \"sentence.R0.pos_tags\", R0.ner_tags AS \"sentence.R0.ner_tags\", R0.doc_offsets AS \"sentence.R0.doc_offsets\", R0.dep_types AS \"sentence.R0.dep_types\", R0.dep_tokens AS \"sentence.R0.dep_tokens\"\nFROM sentence R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentence"
          ],
          "output_relation": "sentences",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/reco_med_ard_guo.py",
          "dependencies_": [
            "process/ext_sentence_by_nlp_markup"
          ],
          "input_": [
            "data/sentence"
          ],
          "output_": "data/sentences"
        }
      }
    },
    "inference": {
      "factors": {
        "factor/inf_istrue_has_effect": {
          "dependencies": [
            "ext_ards_candidate_by_map_ards_candidate",
            "ext_ards_feature_by_extract_ards_features"
          ],
          "function": "Imply(has_effect.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_effect.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_effect R0, ards_candidate R1, ards_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_effect",
            "ards_candidate",
            "ards_feature"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_ards_candidate_by_map_ards_candidate",
            "process/ext_ards_feature_by_extract_ards_features"
          ],
          "input_": [
            "data/has_effect",
            "data/ards_candidate",
            "data/ards_feature"
          ],
          "output_": null
        }
      },
      "factors_": [
        {
          "dependencies": [
            "ext_ards_candidate_by_map_ards_candidate",
            "ext_ards_feature_by_extract_ards_features"
          ],
          "function": "Imply(has_effect.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_effect.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_effect R0, ards_candidate R1, ards_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_effect",
            "ards_candidate",
            "ards_feature"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_ards_candidate_by_map_ards_candidate",
            "process/ext_ards_feature_by_extract_ards_features"
          ],
          "input_": [
            "data/has_effect",
            "data/ards_candidate",
            "data/ards_feature"
          ],
          "output_": null,
          "factorName": "inf_istrue_has_effect",
          "factorsTable": "dd_factors_inf_istrue_has_effect",
          "weightsTable": "dd_weights_inf_istrue_has_effect",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_effect.R0.label",
                "columnPrefix": "has_effect.R0.",
                "name": "has_effect",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_effect.R0.id",
                "schema": {
                  "variableName": "has_effect",
                  "variablesTable": "has_effect",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_effect",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_has_effect"
        }
      ],
      "factors_byName": {
        "inf_istrue_has_effect": {
          "dependencies": [
            "ext_ards_candidate_by_map_ards_candidate",
            "ext_ards_feature_by_extract_ards_features"
          ],
          "function": "Imply(has_effect.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"has_effect.R0.id\" , R2.feature AS \"dd_weight_column_0\" \n          FROM has_effect R0, ards_candidate R1, ards_feature R2\n        WHERE R1.p1_id = R0.p1_id  AND R1.p2_id = R0.p2_id  AND R2.p1_id = R0.p1_id  AND R2.p2_id = R0.p2_id ",
          "input_relations": [
            "has_effect",
            "ards_candidate",
            "ards_feature"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_ards_candidate_by_map_ards_candidate",
            "process/ext_ards_feature_by_extract_ards_features"
          ],
          "input_": [
            "data/has_effect",
            "data/ards_candidate",
            "data/ards_feature"
          ],
          "output_": null,
          "factorName": "inf_istrue_has_effect",
          "factorsTable": "dd_factors_inf_istrue_has_effect",
          "weightsTable": "dd_weights_inf_istrue_has_effect",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "has_effect.R0.label",
                "columnPrefix": "has_effect.R0.",
                "name": "has_effect",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "has_effect.R0.id",
                "schema": {
                  "variableName": "has_effect",
                  "variablesTable": "has_effect",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_has_effect",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_has_effect"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "pipeline/endtoend": [
          "process/ext_sentences_by_modify_sentences",
          "process/ext_sentence_by_nlp_markup",
          "process/ext_has_effect",
          "process/ext_medicine_mention_by_map_medicine_mention",
          "process/ext_ards_candidate_by_map_ards_candidate",
          "process/ext_ards_mention_by_map_ards_mention",
          "process/ext_ards_label_resolved",
          "process/ext_ards_label",
          "process/ext_ards_feature_by_extract_ards_features",
          "factor/inf_istrue_has_effect"
        ],
        "pipeline/extraction": [
          "process/ext_sentences_by_modify_sentences",
          "process/ext_sentence_by_nlp_markup",
          "process/ext_has_effect",
          "process/ext_medicine_mention_by_map_medicine_mention",
          "process/ext_ards_candidate_by_map_ards_candidate",
          "process/ext_ards_mention_by_map_ards_mention",
          "process/ext_ards_label_resolved",
          "process/ext_ards_label",
          "process/ext_ards_feature_by_extract_ards_features"
        ],
        "pipeline/inference": [
          "factor/inf_istrue_has_effect"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "ards_candidate": {
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p1_name": {
              "index": 1,
              "type": "text"
            },
            "p2_id": {
              "index": 2,
              "type": "text"
            },
            "p2_name": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "ards_dbdata": {
          "annotations": [
            {
              "name": "source"
            }
          ],
          "columns": {
            "ard_name": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 1,
              "type": "text"
            },
            "med_name": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 0,
              "type": "text"
            }
          }
        },
        "ards_feature": {
          "annotations": [
            {
              "name": "extraction"
            }
          ],
          "columns": {
            "feature": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 2,
              "type": "text"
            },
            "p1_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p1_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p1_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 1,
              "type": "text"
            }
          }
        },
        "ards_label": {
          "annotations": [
            {
              "name": "extraction"
            }
          ],
          "columns": {
            "label": {
              "annotations": [
                {
                  "name": "navigable"
                }
              ],
              "index": 2,
              "type": "int"
            },
            "p1_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p1_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "args": {
                    "alias": "has_effect",
                    "column": "p2_id",
                    "relation": "has_effect"
                  },
                  "name": "references"
                }
              ],
              "index": 1,
              "type": "text"
            },
            "rule_id": {
              "annotations": [
                {
                  "name": "navigable"
                }
              ],
              "index": 3,
              "type": "text"
            }
          }
        },
        "ards_label_resolved": {
          "columns": {
            "column_0": {
              "index": 0,
              "type": "UNKNOWN"
            },
            "column_1": {
              "index": 1,
              "type": "UNKNOWN"
            },
            "column_2": {
              "index": 2,
              "type": "UNKNOWN"
            }
          },
          "type": "view"
        },
        "ards_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "articles": {
          "columns": {
            "content": {
              "annotations": [
                {
                  "name": "searchable"
                }
              ],
              "index": 1,
              "type": "text"
            },
            "id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "name": "distributed_by"
                }
              ],
              "index": 0,
              "type": "text"
            }
          }
        },
        "has_effect": {
          "annotations": [
            {
              "name": "extraction"
            }
          ],
          "columns": {
            "p1_id": {
              "index": 0,
              "type": "text"
            },
            "p2_id": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "medicine_mention": {
          "columns": {
            "begin_index": {
              "index": 4,
              "type": "int"
            },
            "doc_id": {
              "index": 2,
              "type": "text"
            },
            "end_index": {
              "index": 5,
              "type": "int"
            },
            "mention_id": {
              "index": 0,
              "type": "text"
            },
            "mention_text": {
              "index": 1,
              "type": "text"
            },
            "sentence_index": {
              "index": 3,
              "type": "int"
            }
          }
        },
        "sentence": {
          "annotations": [
            {
              "name": "source"
            }
          ],
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "annotations": [
                {
                  "name": "key"
                },
                {
                  "name": "distributed_by"
                }
              ],
              "index": 0,
              "type": "text"
            },
            "doc_offsets": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "annotations": [
                {
                  "name": "key"
                }
              ],
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "annotations": [
                {
                  "name": "searchable"
                }
              ],
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_tokens": {
              "index": 9,
              "type": "int[]"
            },
            "dep_types": {
              "index": 8,
              "type": "text[]"
            },
            "doc_id": {
              "index": 0,
              "type": "text"
            },
            "doc_offects": {
              "index": 7,
              "type": "int[]"
            },
            "lemmas": {
              "index": 4,
              "type": "text[]"
            },
            "ner_tags": {
              "index": 6,
              "type": "text[]"
            },
            "pos_tags": {
              "index": 5,
              "type": "text[]"
            },
            "sentence_index": {
              "index": 1,
              "type": "int"
            },
            "sentence_text": {
              "index": 2,
              "type": "text"
            },
            "tokens": {
              "index": 3,
              "type": "text[]"
            }
          }
        }
      },
      "variables": {
        "has_effect": {
          "label": "Boolean"
        }
      },
      "variables_": [
        {
          "variableName": "has_effect",
          "variablesTable": "has_effect",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_has_effect",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        }
      ],
      "variables_byName": {
        "has_effect": {
          "variableName": "has_effect",
          "variablesTable": "has_effect",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_has_effect",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        }
      }
    },
    "execution": {
      "processes": {
        "process/init/app": {
          "style": "cmd_extractor",
          "cmd": "\n        deepdive db init\n\n        cd \"$DEEPDIVE_APP\"\n        # run legacy schema.sql\n        if [[ -r schema.sql ]]; then\n            deepdive db prompt <schema.sql\n        fi\n        # run legacy init script\n        if [[ -x input/init.sh ]]; then\n            input/init.sh\n        fi\n        "
        },
        "process/init/relation/ards_dbdata": {
          "style": "cmd_extractor",
          "cmd": "deepdive create table 'ards_dbdata' && deepdive load 'ards_dbdata'",
          "dependencies_": [
            "process/init/app"
          ],
          "output_relation": "ards_dbdata",
          "output_": "data/ards_dbdata"
        },
        "process/init/relation/articles": {
          "style": "cmd_extractor",
          "cmd": "deepdive create table 'articles' && deepdive load 'articles'",
          "dependencies_": [
            "process/init/app"
          ],
          "output_relation": "articles",
          "output_": "data/articles"
        },
        "process/ext_ards_candidate_by_map_ards_candidate": {
          "dependencies": [
            "ext_medicine_mention_by_map_medicine_mention",
            "ext_ards_mention_by_map_ards_mention"
          ],
          "input": " SELECT R0.mention_id AS \"medicine_mention.R0.mention_id\", R0.mention_text AS \"medicine_mention.R0.mention_text\", R1.mention_id AS \"ards_mention.R1.mention_id\", R1.mention_text AS \"ards_mention.R1.mention_text\"\nFROM medicine_mention R0, ards_mention R1\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "medicine_mention",
            "ards_mention"
          ],
          "output_relation": "ards_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_ards_candidate.py",
          "dependencies_": [
            "process/ext_medicine_mention_by_map_medicine_mention",
            "process/ext_ards_mention_by_map_ards_mention"
          ],
          "input_": [
            "data/medicine_mention",
            "data/ards_mention"
          ],
          "output_": "data/ards_candidate"
        },
        "process/ext_ards_feature_by_extract_ards_features": {
          "dependencies": [
            "ext_medicine_mention_by_map_medicine_mention",
            "ext_ards_mention_by_map_ards_mention",
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.mention_id AS \"medicine_mention.R0.mention_id\", R1.mention_id AS \"ards_mention.R1.mention_id\", R0.begin_index AS \"medicine_mention.R0.begin_index\", R0.end_index AS \"medicine_mention.R0.end_index\", R1.begin_index AS \"ards_mention.R1.begin_index\", R1.end_index AS \"ards_mention.R1.end_index\", R0.doc_id AS \"medicine_mention.R0.doc_id\", R0.sentence_index AS \"medicine_mention.R0.sentence_index\", R2.tokens AS \"sentences.R2.tokens\", R2.lemmas AS \"sentences.R2.lemmas\", R2.pos_tags AS \"sentences.R2.pos_tags\", R2.ner_tags AS \"sentences.R2.ner_tags\", R2.dep_types AS \"sentences.R2.dep_types\", R2.dep_tokens AS \"sentences.R2.dep_tokens\"\nFROM medicine_mention R0, ards_mention R1, sentences R2\n        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "medicine_mention",
            "ards_mention",
            "sentences"
          ],
          "output_relation": "ards_feature",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/extract_ards_features.py",
          "dependencies_": [
            "process/ext_medicine_mention_by_map_medicine_mention",
            "process/ext_ards_mention_by_map_ards_mention",
            "process/ext_sentences_by_modify_sentences"
          ],
          "input_": [
            "data/medicine_mention",
            "data/ards_mention",
            "data/sentences"
          ],
          "output_": "data/ards_feature"
        },
        "process/ext_ards_label": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"ards_label\"\n\tdeepdive sql 'INSERT INTO ards_label SELECT R0.p1_id AS \"ards_candidate.R0.p1_id\", R0.p2_id AS \"ards_candidate.R0.p2_id\", 0 AS column_2, NULL AS column_3\nFROM ards_candidate R0\n        \nUNION ALL\nSELECT R0.p1_id AS \"ards_candidate.R0.p1_id\", R0.p2_id AS \"ards_candidate.R0.p2_id\", 3 AS column_2, '\\''from_dbdata'\\'' AS column_3\nFROM ards_candidate R0, ards_dbdata R1\n        WHERE (lower(R1.med_name) = lower(R0.p1_name) AND lower(R1.ard_name) = lower(R0.p2_name))'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_ards_candidate_by_map_ards_candidate"
          ],
          "input_relations": [
            "ards_candidate",
            "ards_dbdata"
          ],
          "output_relation": "ards_label",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_ards_candidate_by_map_ards_candidate"
          ],
          "input_": [
            "data/ards_candidate",
            "data/ards_dbdata"
          ],
          "output_": "data/ards_label"
        },
        "process/ext_ards_label_resolved": {
          "cmd": "\n\n\tdeepdive create view ards_label_resolved as 'SELECT R0.p1_id AS column_0, R0.p2_id AS column_1, SUM(R0.label) AS column_2\nFROM ards_label R0\n        \n        GROUP BY R0.p1_id, R0.p2_id'\n\t\n        ",
          "dependencies": [
            "ext_ards_label"
          ],
          "input_relations": [
            "ards_label"
          ],
          "output_relation": "ards_label_resolved",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_ards_label"
          ],
          "input_": [
            "data/ards_label"
          ],
          "output_": "data/ards_label_resolved"
        },
        "process/ext_ards_mention_by_map_ards_mention": {
          "dependencies": [
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "ards_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_ards_mention.py",
          "dependencies_": [
            "process/ext_sentences_by_modify_sentences"
          ],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/ards_mention"
        },
        "process/ext_has_effect": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"has_effect\"\n\tdeepdive sql 'INSERT INTO has_effect SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, \nCASE WHEN R0.column_2 > 0 THEN true\n     WHEN R0.column_2 < 0 THEN false\n     ELSE NULL\nEND AS label\n          FROM ards_label_resolved R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_ards_label_resolved"
          ],
          "input_relations": [
            "ards_label_resolved"
          ],
          "output_relation": "has_effect",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_ards_label_resolved"
          ],
          "input_": [
            "data/ards_label_resolved"
          ],
          "output_": "data/has_effect"
        },
        "process/ext_medicine_mention_by_map_medicine_mention": {
          "dependencies": [
            "ext_sentences_by_modify_sentences"
          ],
          "input": " SELECT R0.doc_id AS \"sentences.R0.doc_id\", R0.sentence_index AS \"sentences.R0.sentence_index\", R0.tokens AS \"sentences.R0.tokens\", R0.ner_tags AS \"sentences.R0.ner_tags\"\nFROM sentences R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences"
          ],
          "output_relation": "medicine_mention",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/map_medicine_mention.py",
          "dependencies_": [
            "process/ext_sentences_by_modify_sentences"
          ],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/medicine_mention"
        },
        "process/ext_sentence_by_nlp_markup": {
          "input": " SELECT R0.id AS \"articles.R0.id\", R0.content AS \"articles.R0.content\"\nFROM articles R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "articles"
          ],
          "output_relation": "sentence",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/fenci.py",
          "dependencies_": [],
          "input_": [
            "data/articles"
          ],
          "output_": "data/sentence"
        },
        "process/ext_sentences_by_modify_sentences": {
          "dependencies": [
            "ext_sentence_by_nlp_markup"
          ],
          "input": " SELECT R0.doc_id AS \"sentence.R0.doc_id\", R0.sentence_index AS \"sentence.R0.sentence_index\", R0.sentence_text AS \"sentence.R0.sentence_text\", R0.tokens AS \"sentence.R0.tokens\", R0.lemmas AS \"sentence.R0.lemmas\", R0.pos_tags AS \"sentence.R0.pos_tags\", R0.ner_tags AS \"sentence.R0.ner_tags\", R0.doc_offsets AS \"sentence.R0.doc_offsets\", R0.dep_types AS \"sentence.R0.dep_types\", R0.dep_tokens AS \"sentence.R0.dep_tokens\"\nFROM sentence R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentence"
          ],
          "output_relation": "sentences",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"/udf/reco_med_ard_guo.py",
          "dependencies_": [
            "process/ext_sentence_by_nlp_markup"
          ],
          "input_": [
            "data/sentence"
          ],
          "output_": "data/sentences"
        }
      }
    },
    "calibration": null
  }
}
